// <auto-generated />
using System;
using LusoHealthClient.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LusoHealthClient.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LusoHealthClient.Server.Models.Appointments.AvailableSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<int>("IdService")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("SlotDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AvailableSlots");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.FeedbackAndReports.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdProfesional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.FeedbackAndReports.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPatient");

                    b.HasIndex("IdService");

                    b.HasIndex("ProfessionalUserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdProfessional")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProfessional");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.ProfessionalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Médico"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Enfermeiro"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dentista"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fisioterapeuta"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nutricionista"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Psicologista"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fisiologista"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Outro"
                        });
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Home")
                        .HasColumnType("bit");

                    b.Property<string>("IdProfessional")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdSpecialty")
                        .HasColumnType("int");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<bool>("Presential")
                        .HasColumnType("bit");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdProfessional");

                    b.HasIndex("IdSpecialty");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TimesScheduled")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Anatomia Patológica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anestesiologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cardiologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cardiologia Pediátrica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cirurgia Cardíaca",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cirurgia Geral",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cirurgia Maxilofacial",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cirurgia Pediátrica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cirurgia Plástica, Reconstrutiva e Estética",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cirurgia Torácica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cirurgia Vascular",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 12,
                            Name = "Clínica Geral",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cuidados Paliativos",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 14,
                            Name = "Dermatologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 15,
                            Name = "Endocrinologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 16,
                            Name = "Estomatologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 17,
                            Name = "Farmacologia Clínica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 18,
                            Name = "Gastrenterologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 19,
                            Name = "Gastrenterologia Pediátrica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 20,
                            Name = "Genética Médica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 21,
                            Name = "Ginecologia-Obstetrícia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 22,
                            Name = "Hematologia Clínica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 23,
                            Name = "Imagiologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 24,
                            Name = "Imunoalergologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 25,
                            Name = "Imunohemoterapia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 26,
                            Name = "Infecciologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 27,
                            Name = "Medicina Capilar",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 28,
                            Name = "Medicina de Trabalho",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 29,
                            Name = "Medicina Desportiva",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 30,
                            Name = "Medicina Estética",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 31,
                            Name = "Medicina Física e de Reabilitação",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 32,
                            Name = "Medicina Geral e Familiar",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 33,
                            Name = "Medicina Intensiva",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 34,
                            Name = "Medicina Interna",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 35,
                            Name = "Medicina Nuclear",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 36,
                            Name = "Nefrologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 37,
                            Name = "Nefrologia Pediátrica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 38,
                            Name = "Neonatologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 39,
                            Name = "Neurocirurgia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 40,
                            Name = "Neurologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 41,
                            Name = "Neuropediatria",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 42,
                            Name = "Neurorradiologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 43,
                            Name = "Oftalmologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 44,
                            Name = "Oncologia Médica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 45,
                            Name = "Ortopedia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 46,
                            Name = "Otorrinolaringologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 47,
                            Name = "Patologia Clínica",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 48,
                            Name = "Pediatria",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 49,
                            Name = "Pediatria do Desenvolvimento",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 50,
                            Name = "Pneumologia",
                            ProfessionalTypeId = 1,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 51,
                            Name = "Sem Especialidade",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 52,
                            Name = "Médico-Cirúrgica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 53,
                            Name = "Pediatria",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 54,
                            Name = "Obstétrica e Ginecológica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 55,
                            Name = "Saúde Mental",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 56,
                            Name = "Geriátrica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 57,
                            Name = "Comunitária",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 58,
                            Name = "Oncológica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 59,
                            Name = "Cuidados Paliativos",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 60,
                            Name = "Reabilitação",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 61,
                            Name = "Cardiovascular",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 62,
                            Name = "Nefrológica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 63,
                            Name = "Dermatológica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 64,
                            Name = "Saúde da Mulher",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 65,
                            Name = "Cirurgia Plástica",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 66,
                            Name = "Saúde do Trabalhador",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 67,
                            Name = "Neonatal",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 68,
                            Name = "Saúde da Família",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 69,
                            Name = "Transplantes",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 70,
                            Name = "Diabetes",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 71,
                            Name = "Cuidados Continuados",
                            ProfessionalTypeId = 2,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 101,
                            Name = "Sem Especialidade",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 102,
                            Name = "Ortodontia",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 103,
                            Name = "Periodontia",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 104,
                            Name = "Endodontia",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 105,
                            Name = "Cirurgia Oral e Maxilofacial",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 106,
                            Name = "Odontopediatria",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 107,
                            Name = "Dentística Restauradora",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 108,
                            Name = "Implantologia",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 109,
                            Name = "Ortopedia Funcional dos Maxilares",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 110,
                            Name = "Medicina Oral",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 111,
                            Name = "Patologia Oral",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 112,
                            Name = "Radiologia Odontológica",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 113,
                            Name = "Odontologia do Trabalho",
                            ProfessionalTypeId = 3,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 114,
                            Name = "Sem Especialidade",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 115,
                            Name = "Desportiva",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 116,
                            Name = "Neurológica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 117,
                            Name = "Ortopédica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 118,
                            Name = "Respiratória",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 119,
                            Name = "Pediatria",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 120,
                            Name = "Geriátrica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 121,
                            Name = "Cardiovascular",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 122,
                            Name = "Aquática",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 123,
                            Name = "Feminina",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 124,
                            Name = "Trabalho",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 125,
                            Name = "Oncológica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 126,
                            Name = "Reumatológica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 127,
                            Name = "Intensiva",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 128,
                            Name = "Vestibular",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 129,
                            Name = "Traumato-Ortopédica",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 130,
                            Name = "Manual",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 131,
                            Name = "Dermatofuncional",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 132,
                            Name = "Terapia Intensiva Neonatal",
                            ProfessionalTypeId = 4,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 133,
                            Name = "Sem Especialidade",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 134,
                            Name = "Clínica",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 135,
                            Name = "Esportiva",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 136,
                            Name = "Materno-Infantil",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 137,
                            Name = "Funcional",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 138,
                            Name = "Estética",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 139,
                            Name = "Geriátrica",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 140,
                            Name = "Oncológica",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 141,
                            Name = "Comportamental",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 142,
                            Name = "Escolar",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 143,
                            Name = "Enteral e Parenteral",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 144,
                            Name = "Saúde Pública",
                            ProfessionalTypeId = 5,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 145,
                            Name = "Sem Especialidade",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 146,
                            Name = "Clínica",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 147,
                            Name = "Educacional",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 148,
                            Name = "Organizacional e do Trabalho",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 149,
                            Name = "Social",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 150,
                            Name = "Desportiva",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 151,
                            Name = "Saúde",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 152,
                            Name = "Forense",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 153,
                            Name = "Desenvolvimento",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 154,
                            Name = "Cognitiva",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 155,
                            Name = "Neuropsicologia",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 156,
                            Name = "Positiva",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 157,
                            Name = "Ambiental",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 158,
                            Name = "Transpessoal",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 159,
                            Name = "Familiar",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 160,
                            Name = "Tráfego",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 161,
                            Name = "Personalidade",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 162,
                            Name = "Existencial",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 163,
                            Name = "Consumidor",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 164,
                            Name = "Envelhecimento",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 165,
                            Name = "Escolar",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 166,
                            Name = "Trabalho e Carreira",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 167,
                            Name = "Aprendizagem",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 168,
                            Name = "Cultural",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 169,
                            Name = "Espectro Autista",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 170,
                            Name = "Trauma",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 171,
                            Name = "Sexualidade",
                            ProfessionalTypeId = 6,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 172,
                            Name = "Desportiva",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 173,
                            Name = "Cardiovascular",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 174,
                            Name = "Respiratória",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 175,
                            Name = "Renal",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 176,
                            Name = "Endócrina",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 177,
                            Name = "Neurofisiologia",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 178,
                            Name = "Reprodutiva",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 179,
                            Name = "Sistema Digestivo",
                            ProfessionalTypeId = 7,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 180,
                            Name = "Terapia Ocupacional",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 181,
                            Name = "Quiropraxia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 182,
                            Name = "Acupuntura",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 183,
                            Name = "Podologia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 184,
                            Name = "Osteopatia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 185,
                            Name = "Musicoterapia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 186,
                            Name = "Arteterapia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 187,
                            Name = "Terapia Comportamental",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 188,
                            Name = "Terapia Holística",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 189,
                            Name = "Terapia Familiar",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 190,
                            Name = "Terapia de Casal",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 191,
                            Name = "Terapia de Grupo",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 192,
                            Name = "Terapia Cognitivo-Comportamental (TCC)",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 193,
                            Name = "Naturopatia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 194,
                            Name = "Homeopatia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 195,
                            Name = "Hipnoterapia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 196,
                            Name = "Reflexologia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 197,
                            Name = "Shiatsu",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        },
                        new
                        {
                            Id = 198,
                            Name = "Massoterapia",
                            ProfessionalTypeId = 8,
                            TimesScheduled = 0
                        });
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Services.Appointment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("IdPatient")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdProfesional")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPatient");

                    b.HasIndex("IdProfesional");

                    b.HasIndex("IdService");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Patient", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Professional", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Relative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("IdPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nif")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPatient");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.FeedbackAndReports.Review", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LusoHealthClient.Server.Models.Professionals.Service", "Service")
                        .WithMany()
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LusoHealthClient.Server.Models.Users.Professional", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProfessionalUserID");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Certificate", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.Professional", "Professional")
                        .WithMany("Certificates")
                        .HasForeignKey("IdProfessional")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Service", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.Professional", "Professional")
                        .WithMany("Services")
                        .HasForeignKey("IdProfessional")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LusoHealthClient.Server.Models.Professionals.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("IdSpecialty")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Professionals.Specialty", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Professionals.ProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Services.Appointment", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IdPatient");

                    b.HasOne("LusoHealthClient.Server.Models.Users.Professional", "Professional")
                        .WithMany()
                        .HasForeignKey("IdProfesional");

                    b.HasOne("LusoHealthClient.Server.Models.Professionals.Service", "Service")
                        .WithMany()
                        .HasForeignKey("IdService");

                    b.Navigation("Patient");

                    b.Navigation("Professional");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Patient", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Professional", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Professionals.ProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LusoHealthClient.Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Relative", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.Patient", "Patient")
                        .WithMany("FamilyAggregate")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LusoHealthClient.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LusoHealthClient.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Patient", b =>
                {
                    b.Navigation("FamilyAggregate");
                });

            modelBuilder.Entity("LusoHealthClient.Server.Models.Users.Professional", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
